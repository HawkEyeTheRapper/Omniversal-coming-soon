# Omniversal Cloudflare Deployment Guide

## Overview
This guide provides step-by-step instructions to automate the deployment of **Omniversal's Coming Soon Pages** using Cloudflare Pages, GitHub Actions, and a custom Python script.

## **1️⃣ Setting Up Cloudflare Pages**
### **Step 1: Create a Cloudflare Pages Project**
1. Go to **Cloudflare Dashboard** → **Pages**
2. Click **Create a Project**
3. Connect your **GitHub Repository** (`omniversal-coming-soon`)
4. Select the **branch** (`main`)
5. Set **Build Output Directory** → `pages/`
6. Click **Deploy**

### **Step 2: Configure Custom Domains**
Once deployed, set up your **custom domains** in Cloudflare:
- Go to **Pages → Custom Domains**
- Add all domains from the **Omniversal domain list**
- Verify DNS settings

---
## **2️⃣ Automating Deployment with Python**

### **Python Script for Automation**
This script:
✅ Generates **static HTML pages** for each domain
✅ Pushes updates to **GitHub**
✅ Triggers **Cloudflare Pages deployment**
✅ Configures **Cloudflare custom domains**

#### **Script Setup**
1. Install dependencies:
   ```bash
   pip install requests
   ```
2. Update placeholders in the script:
   ```python
   github_repo = "your-github-username/omniversal-coming-soon"
   cloudflare_account_id = "your-cloudflare-account-id"
   cloudflare_api_token = "your-cloudflare-api-token"
   ```
3. Run the script:
   ```bash
   python deploy.py
   ```

### **Cloudflare API Authentication**
1. Go to **Cloudflare Dashboard** → **API Tokens**
2. Generate a token with **Pages permissions**
3. Store the token securely in **.env or secrets**

---
## **3️⃣ Automating with GitHub Actions**

### **Step 1: Create GitHub Actions Workflow**
Create `.github/workflows/deploy.yml` in your repo:
```yaml
name: Deploy to Cloudflare Pages

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install Dependencies
        run: pip install requests

      - name: Run Deployment Script
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: python deploy.py
```

### **Step 2: Add Secrets to GitHub**
1. Go to **GitHub Repository → Settings → Secrets**
2. Add:
   - `CLOUDFLARE_API_TOKEN`
   - `CLOUDFLARE_ACCOUNT_ID`

### **Step 3: Push Changes & Auto-Deploy**
Every push to `main` will trigger:
✅ **Auto HTML generation**
✅ **GitHub commit & push**
✅ **Cloudflare Pages deployment**
✅ **Custom domain configuration**

---
## **4️⃣ Project Structure (Jupyter Notebooks)**
### **Jupyter Notebook Layout**
```
📂 Omniversal Cloudflare Deployment
├── 📘 Omniversal_Pages_Main.ipynb
│   ├── 🔗 Links to all sub-notebooks
│
├── 📂 Cloudflare Automation
│   ├── 📗 Setup_Cloudflare_Pages.ipynb
│   ├── 📗 Deploy_Sites.ipynb
│
├── 📂 Domain-Specific Notebooks
│   ├── 📘 OmniversalMedia.ipynb
│   ├── 📘 TheGoverningConspiracy.ipynb
│   ├── 📘 CryptoSpace.ipynb
│   ├── 📘 HawkEyeTheRapper.ipynb
│   ├── 📘 E-Commerce.ipynb
│
├── 📂 HTML Templates & Resources
│   ├── 📘 HTML_Templates.ipynb
│   ├── 📘 Footer_Branding.ipynb
│
📜 **README.md** (Setup instructions & automation details)
```

---
## **5️⃣ Next Steps**
1️⃣ **Run the Python script** for a test deployment
2️⃣ **Ensure GitHub Actions auto-deploys new changes**
3️⃣ **Monitor Cloudflare for live updates**
4️⃣ **Expand automation & improve branding**

🚀 **This workflow ensures smooth, automated deployment of all Omniversal domains!**

---
### **🔹 Need Further Enhancements?**
- Set up **Cloudflare Workers for serverless automation**
- Add **email capture forms with Cloudflare KV storage**
- Integrate **Next.js or Hugo for dynamic pre-built pages**

🫡 Let me know if you need further refinements!

